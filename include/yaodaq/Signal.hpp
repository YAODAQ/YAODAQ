#ifndef YAODAQ_SIGNAL
#define YAODAQ_SIGNAL

/**
\copyright Copyright 2022 flagarde
*/

#include "yaodaq/Severity.hpp"

#include <cstdint>

namespace yaodaq
{

enum class Signal
{
  NO   = 0,  // No Signal.
  // Critical
  ABRT = static_cast<int>( Severity::Critical ) + 1,  // (Signal Abort) Abnormal termination, such as is initiated by the abort function.
  FPE  = static_cast<int>( Severity::Critical ) + 2,  // (Signal Floating-Point Exception) Erroneous arithmetic operation, such as zero divide or an operation resulting in overflow (not necessarily with a floating-point operation).
  ILL  = static_cast<int>( Severity::Critical ) + 3,  // (Signal Illegal Instruction) Invalid function image, such as an illegal instruction. This is generally due to a corruption in the code or to an attempt to execute data.
  SEGV = static_cast<int>( Severity::Critical ) + 4,  // (Signal Segmentation Violation) Invalid access to storage: When a program tries to read or write outside the memory it has allocated.
  // Warning
  INT  = static_cast<int>( Severity::Warning ) + 1,  // (Signal Interrupt) Interactive attention signal. Generally generated by the application user.
  TERM = static_cast<int>( Severity::Warning ) + 2,  // (Signal Terminate) Termination request sent to program.
};

}  // namespace yaodaq

#endif  // YAODAQ_CLASS_HPP
